# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pVOAq8bVaguFGWUtEjWp6A2_PlYZzLMF
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dataset=pd.read_csv('Salary_dataset.csv')
dataset

dataset.isna().sum()

x=dataset.iloc[:,:1]
x

y=dataset.iloc[:,-1]
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

x_train

x_test

from sklearn.linear_model import LinearRegression
r=LinearRegression()
r.fit(x_train,y_train)

y_pred=r.predict(x_test)

plt.scatter(x_train,y_train,color='blue')
plt.plot(x_train,r.predict(x_train),color='blue')
plt.xlabel('experience')
plt.ylabel('salary')
plt.show()

plt.scatter(x_test,y_test,color='blue')
plt.plot(x_test,r.predict(x_test),color='blue')
plt.xlabel('experience')
plt.ylabel('salary')
plt.show()

import numpy as np
import pandas as pd

data=pd.read_csv('Data1.csv')
data

x=data.iloc[:,0:3]
x

y=data.iloc[:,3]
y

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.NaN,strategy="mean")
imputer=imputer.fit(x[:,1:3])
x[:,1:3]=imputer.transform(x[:,1:3])
x

from sklearn.impute import SimpleImputer
kk=SimpleImputer(missing_values=np.nan,strategy='mean')
kk=kk.fit(x[:,1:3])
x[:,1:3]=kk.transform(x[:,1:3])
x

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.nan,strategy='mean')
imputer=imputer.fit(data['salary'])
data['salary']=imputer.transform(x['salary'])
imputer=imputer.fit(data['Age'])
data['Age']=imputer.transform(x['Age'])
data

import numpy as np
from numpy.linalg import norm
A = np.array([1,1,1,1,1,1,0,0,0])
B = np.array([0,0,1,0,1,1,1,1,1])
print("A:", A)
print("B:", B)
cosine = np.dot(A,B)/(norm(A)*norm(B))
print("Cosine Similarity:", cosine)

from scipy import stats
expe=np.array([5,6,7,8,9,10,11,12,13,14])
sa=np.array([10,15,17,18,20,22,25,28,29,30])
stats.pearsonr(expe,sa)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

iris=pd.read_csv('iris.csv')
iris

iris.describe()

iris.isnull().sum()

x=iris.drop('species',axis=1)
x

y=iris['species']
y

from sklearn.preprocessing import LabelEncoder
lab=LabelEncoder()
y=lab.fit_transform(y)
iris['species']=y
iris

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

x_train

from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier()
clf.fit(x_train,y_train)

y_pred=clf.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred,y_test)*100)

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_pred,y_test))

from sklearn import tree
tree.plot_tree(clf)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data=pd.read_csv('play_tennis.csv')
data

data=data.drop(columns=['day'])
data

x=data.drop(columns=['play'])
x

y=data['play']
y

from sklearn.preprocessing import LabelEncoder
lab=LabelEncoder()
a=data['outlook']
a=lab.fit_transform(a)
data['outlook']=a
data

a=data['temp']
a=lab.fit_transform(a)
data['temp']=a
data

a=data['humidity']
a=lab.fit_transform(a)
data['humidity']=a
data

a=data['wind']
a=lab.fit_transform(a)
data['wind']=a
data

y=data['play']
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

x_train.shape

from sklearn.naive_bayes import GaussianNB
model=GaussianNB()

model.fit(x_train,y_train)

y_pred=model.predict(x_test)
y_pred

from sklearn.metrics import top_k_accuracy_score
print(accuracy_score(y_pred,y_test)*100)

x=[[1,2,0,1]]
y_pred=model.predict(x)
y_pred

import pandas as pd
data=[['bread','milk'],['bread','diaper','beer','milk'],['milk','diaper','beer','cola'],['bread','milk','diaper','beer'],['bread','milk','diaper','cola']]
data

from mlxtend.frequent_patterns import apriori, association_rules
association_rules=apriori(data,min_support=0.2,min_confidence=0.7)
association_result=list(association_rules)
association_result

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

ratings=[['teja',5,5,3,2],['sunil',4,5,1,1],['siddu',1,1,5,5],['avi',2,1,5,4]]
titles=['user','pushpa','rrr','viru','kan']
movies=pd.DataFrame(ratings,columns=titles)
movies

from sklearn import cluster
data=movies.drop('user',axis=1)
k_means=cluster.KMeans(n_clusters=2,max_iter=30,random_state=1)
k_means.fit(data)
labels=k_means.labels_
pd.DataFrame(labels,index=movies.user,columns=['clusterid'])

centroids=k_means.cluster_centers_
pd.DataFrame(centroids,columns=data.columns)

